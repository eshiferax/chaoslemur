{"name":"ChaosLemur","tagline":"Injecting failures into BGP.","body":"# ChaosLemur\r\nInjecting failures into BGP.\r\n\r\nInspired by [Chaos Engineering](http://principlesofchaos.org) from Netflix and [SDN ChaosMonkey](http://conferences.sigcomm.org/sigcomm/2015/pdf/papers/p371.pdf).\r\n\r\nUses [Quagga](http://www.nongnu.org/quagga/) for building virtual network, [Docker](http://docker.com) for running separate virtual BGP routers/ASes on containers.\r\n\r\n## How to Build/Run\r\n  * To install all dependencies, run cl_install.sh\r\n  * To run the pre-defined test setting up a ChaosLemur experiment with 4 routers in a mesh topology,\r\n    run \"sudo python src/CLGen/ChaosLemurConfigGenerator.py\".\r\n\r\n\r\n## Current Progress\r\n  * Scripts for configuring and running docker containers with quagga, able to speak BGP to each other.\r\n  * API to introduce single-node failures and reverse them. (Taking down individual routers).\r\n  * Logging of BGP\r\n\r\n## Planned Features\r\n* API for link failures.\r\n* Parsing, interpretation of BGP logs for measuring \"response\" to failures.\r\n* Allow user to build initial \"Experiment Plan\" for failures that will be introduced to BGP network, and then have them continuously updated.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}